apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "overpass-api.fullname" . }}-scripts
  labels:
    {{- include "overpass-api.labels" . | nindent 4 }}
data:
  init_overpass.sh: |
    #!/bin/bash

    set -e

    BOO_OVERPASS_DB_DIR="/app/db"
    BOO_OVERPASS_DIFF_DIR="/app/diffs"
    BOO_WORK_DIR="/app/work"

    # Define the log function with log levels
    log() {
      local level="$1"
      shift
      echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] - $*" >&2
    }

    # Function to display available disk space
    display_disk_space() {
      local path="$1"
      local space
      space=$(df -h "${path}" | awk 'NR==2 {print $4}')
      log "INFO" "Available disk space at ${path}: ${space}"
    }

    # Function to monitor disk space periodically
    monitor_disk_space() {
      while true; do
        display_disk_space "${BOO_OVERPASS_DB_DIR}"
        sleep 60
      done
    }

    # Function to download the planet file
    download_planet_file() {
      local file_name
      file_name=$(basename "$OVERPASS_PLANET_URL")
      local planet_file="${BOO_WORK_DIR}/${file_name}"

      log "INFO" "Downloading planet file: ${file_name}"

      wget -nv --show-progress --progress=dot -e dotbytes=30M -O "${planet_file}" "$OVERPASS_PLANET_URL"

      if [ ! -f "${planet_file}" ]; then
        log "ERROR" "Failed to download ${file_name}"
        exit 1
      fi

      echo "${planet_file}"
    }

    # Function to prepare the initialization file
    prepare_init_file() {
      local planet_file="$1"

      if [ ! -f "${planet_file}" ]; then
        log "ERROR" "Planet file not found: ${planet_file}"
        exit 1
      fi

      if [[ "$planet_file" == *.osm.pbf ]]; then
        log "INFO" "Converting PBF to BZ2 format using osmium with progress..."
        local osm_file="${BOO_WORK_DIR}/planet.osm.bz2"

        # Check if osmium is available
        if ! command -v osmium >/dev/null 2>&1; then
          log "ERROR" "osmium command not found. Please install osmium."
          exit 1
        fi

        osmium cat "${planet_file}" -o "${osm_file}" --verbose --overwrite

        if [ ! -f "${osm_file}" ]; then
          log "ERROR" "OSM file not created: ${osm_file}"
          exit 1
        fi

        echo "${osm_file}"
      elif [[ "$planet_file" == *.osm.bz2 ]]; then
        log "INFO" "Using bz2 file directly..."
        echo "${planet_file}"
      else
        log "ERROR" "Unsupported file format: ${planet_file}"
        exit 1
      fi
    }

    cleanup_files() {
      local planet_file="$1"
      local init_file="$2"

      rm -f "${planet_file}"
      [ "${planet_file}" != "${init_file}" ] && rm -f "${init_file}"
    }

    # Function to initialize the database
    initialize_database() {
      if [ ! -f "$BOO_OVERPASS_DB_DIR/replicate_id" ]; then
        log "INFO" "Initializing database..."
        mkdir -p "$BOO_OVERPASS_DB_DIR" "$BOO_OVERPASS_DIFF_DIR" "$BOO_WORK_DIR"

        display_disk_space "${BOO_WORK_DIR}"

        local planet_file
        planet_file=$(download_planet_file)
        log "INFO" "Downloaded file: ${planet_file}"

        display_disk_space "${BOO_WORK_DIR}"

        local init_file
        init_file=$(prepare_init_file "${planet_file}")
        log "INFO" "Prepared file: ${init_file}"

        display_disk_space "${BOO_WORK_DIR}"

        if [ ! -f "${init_file}" ]; then
          log "ERROR" "Prepared file not found: ${init_file}"
          exit 1
        fi

        log "INFO" "Initializing Overpass database with file: ${init_file}"

        display_disk_space "${BOO_OVERPASS_DB_DIR}"

        # Temporarily disable 'set -e' to capture errors
        set +e

        # Start background disk space monitoring
        monitor_disk_space &
        disk_monitor_pid=$!

        # Run the database initialization script
        /app/osm-3s/bin/init_osm3s.sh "${init_file}" "$BOO_OVERPASS_DB_DIR" "/app/osm-3s" \
          --meta="$OVERPASS_META" --compression-method="$OVERPASS_COMPRESSION"

        exit_status=$?

        # Stop disk space monitoring
        kill "$disk_monitor_pid"

        set -e

        if [ $exit_status -ne 0 ]; then
          log "ERROR" "init_osm3s.sh failed with exit status $exit_status. Exiting."
          sleep 5
          exit $exit_status
        fi

        cleanup_files "${planet_file}" "${init_file}"

        display_disk_space "${BOO_WORK_DIR}"

        log "INFO" "Database initialization complete."
      else
        log "INFO" "Database already initialized."
      fi
    }

    main() {
      initialize_database
    }

    main


  run_overpass.sh: |
    #!/bin/bash

    set -e

    BOO_OVERPASS_DB_DIR="/app/db"
    BOO_OVERPASS_DIFF_DIR="/app/diffs"

    # Define the log function with log levels
    log() {
      local level="$1"
      shift
      echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] - $*" >&2
    }

    start_api_and_updates() {
      log "INFO" "Starting Overpass API and update processes..."

      /app/osm-3s/bin/dispatcher --osm-base --meta="$OVERPASS_META" --db-dir="$BOO_OVERPASS_DB_DIR" &

      # Start the continuous update process
      log "INFO" "Starting fetch_osc.sh..."
      /app/osm-3s/bin/fetch_osc.sh "$OVERPASS_UPDATE_FREQUENCY" "$OVERPASS_DIFF_URL" "$BOO_OVERPASS_DIFF_DIR" &

      log "INFO" "Starting apply_osc_to_db.sh..."
      /app/osm-3s/bin/apply_osc_to_db.sh "$BOO_OVERPASS_DIFF_DIR" "$OVERPASS_UPDATE_FREQUENCY" --meta="$OVERPASS_META" &

      log "INFO" "Starting rules_loop.sh..."
      /app/osm-3s/bin/rules_loop.sh "$BOO_OVERPASS_DB_DIR" "$OVERPASS_RULES_LOAD" &

      log "INFO" "Configuring and starting fcgiwrap..."
      sed -i "s/FCGI_CHILDREN=.*/FCGI_CHILDREN=$OVERPASS_FASTCGI_PROCESSES/" /etc/init.d/fcgiwrap
      service fcgiwrap start

      log "INFO" "Configuring Overpass settings..."
      echo "$BOO_OVERPASS_RATE_LIMIT" > "$BOO_OVERPASS_DB_DIR/rate_limit"
      echo "$BOO_OVERPASS_TIME" > "$BOO_OVERPASS_DB_DIR/max_allowed_time"
      echo "$BOO_OVERPASS_SPACE" > "$BOO_OVERPASS_DB_DIR/max_allowed_space"
      echo "$BOO_OVERPASS_MAX_TIMEOUT" > "$BOO_OVERPASS_DB_DIR/max_allowed_timeout"

      log "INFO" "Starting nginx..."
      nginx -g 'daemon off;'
    }

    main() {
      start_api_and_updates
    }

    main

  health_check.sh: |
    #!/bin/bash

    # Credits to https://github.com/wiktorn/Overpass-API/blob/master/docker-healthcheck.sh

    set -e -o pipefail

    BOO_NODE_ID=1

    # Define the log function with log levels
    log() {
      local level="$1"
      shift
      echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] - $*" >&2
    }

    # if we allow duplicate queries, the healthcheck will fail because it always fetches node id 1
    # if that is the case (default), we query a random node
    if [[ ! -n ${BOO_OVERPASS_ALLOW_DUPLICATE_QUERIES} || ${BOO_OVERPASS_ALLOW_DUPLICATE_QUERIES} == "no" ]]; then
      BOO_NODE_ID=$(shuf -i 1-10000000 -n 1)
    fi

    BOO_OVERPASS_HEALTHCHECK='curl --noproxy "*" -qf "http://localhost/api/interpreter?data=\[out:json\];node(${BOO_NODE_ID});out;" | jq ".generator" |grep -q Overpass || exit 1'

    # Perform the health check
    if eval "${BOO_OVERPASS_HEALTHCHECK}"; then
      log "INFO" "Health check passed."
      exit 0
    else
      log "ERROR" "Health check failed."
      exit 1
    fi