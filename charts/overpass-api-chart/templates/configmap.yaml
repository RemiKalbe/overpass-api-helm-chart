apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "overpass-api.fullname" . }}-scripts
  labels:
    {{- include "overpass-api.labels" . | nindent 4 }}
data:
  init_overpass.sh: |
    #!/bin/bash

    set -e

    OVERPASS_DB_DIR="/app/db"
    OVERPASS_DIFF_DIR="/app/diffs"
    WORK_DIR="/app/work"

    download_planet_file() {
      local file_name=$(basename "$OVERPASS_PLANET_URL")
      local planet_file="${WORK_DIR}/${file_name}"

      echo "Downloading planet file: ${file_name}" >&2
      wget --progress=dot -e dotbytes=30M -O "${planet_file}" "$OVERPASS_PLANET_URL"

      if [ ! -f "${planet_file}" ]; then
        echo "Error: Failed to download ${file_name}" >&2
        exit 1
      fi

      echo "${planet_file}"
    }

    prepare_init_file() {
      local planet_file="$1"

      if [ ! -f "${planet_file}" ]; then
        echo "Error: Planet file not found: ${planet_file}" >&2
        exit 1
      fi

      if [[ "$planet_file" == *.osm.pbf ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Converting PBF to OSM format using osmconvert..." >&2
        local osm_file="${WORK_DIR}/planet.osm"

        # Check if osmconvert is available
        if ! command -v osmconvert >/dev/null 2>&1; then
          echo "Error: osmconvert command not found. Please install osmconvert." >&2
          exit 1
        fi

        # Temporarily disable 'set -e' to capture errors
        set +e
        osmconvert "${planet_file}" -o="${osm_file}" -v
        exit_status=$?
        set -e

        if [ $exit_status -ne 0 ]; then
          echo "Error: osmconvert failed with exit status $exit_status" >&2
          echo "Check for possible errors during conversion." >&2
          sleep 5
          exit $exit_status
        fi

        if [ ! -f "${osm_file}" ]; then
          echo "Error: OSM file not created: ${osm_file}" >&2
          exit 1
        fi

        echo "${osm_file}"
      elif [[ "$planet_file" == *.osm.bz2 ]]; then
        echo "Using bz2 file directly..." >&2
        echo "${planet_file}"
      else
        echo "Unsupported file format: ${planet_file}" >&2
        exit 1
      fi
    }

    cleanup_files() {
      local planet_file="$1"
      local init_file="$2"

      rm -f "${planet_file}"
      [ "${planet_file}" != "${init_file}" ] && rm -f "${init_file}"
    }

    initialize_database() {
      if [ ! -f "$OVERPASS_DB_DIR/replicate_id" ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Initializing database..." >&2
        mkdir -p "$OVERPASS_DB_DIR" "$OVERPASS_DIFF_DIR" "$WORK_DIR"

        local planet_file
        planet_file=$(download_planet_file)
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Downloaded file: ${planet_file}" >&2

        local init_file
        init_file=$(prepare_init_file "${planet_file}")
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Prepared file: ${init_file}" >&2

        if [ ! -f "${init_file}" ]; then
          echo "Error: Prepared file not found: ${init_file}" >&2
          exit 1
        fi

        echo "$(date '+%Y-%m-%d %H:%M:%S') - Initializing Overpass database with file: ${init_file}" >&2

        # Temporarily disable 'set -e'
        set +e

        # Run init_osm3s.sh and redirect output to stderr
        /app/osm-3s/bin/init_osm3s.sh "${init_file}" "$OVERPASS_DB_DIR" "/app/osm-3s" \
            --meta="$OVERPASS_META" --compression-method="$OVERPASS_COMPRESSION" 2>&1

        exit_status=$?

        # Re-enable 'set -e'
        set -e

        echo "init_osm3s.sh exited with status $exit_status" >&2

        if [ $exit_status -ne 0 ]; then
          echo "Error: init_osm3s.sh failed. Exiting." >&2
          sleep 5  # Ensure logs are flushed
          exit $exit_status
        fi

        cleanup_files "${planet_file}" "${init_file}"

        echo "$(date '+%Y-%m-%d %H:%M:%S') - Database initialization complete." >&2
      else
        echo "Database already initialized." >&2
      fi
    }


    main() {
      initialize_database
    }

    main


  run_overpass.sh: |
    #!/bin/bash

    set -e

    OVERPASS_DB_DIR="/app/db"
    OVERPASS_DIFF_DIR="/app/diffs"

    start_api_and_updates() {
      echo "Starting Overpass API and update process..." >&2
      /app/osm-3s/bin/dispatcher --osm-base --meta="$OVERPASS_META" --db-dir="$OVERPASS_DB_DIR" &
      
      # Start the continuous update process
      /app/osm-3s/bin/fetch_osc.sh "$OVERPASS_UPDATE_FREQUENCY" "$OVERPASS_DIFF_URL" "$OVERPASS_DIFF_DIR" &
      /app/osm-3s/bin/apply_osc_to_db.sh "$OVERPASS_DIFF_DIR" "$OVERPASS_UPDATE_FREQUENCY" --meta="$OVERPASS_META" &
      /app/osm-3s/bin/rules_loop.sh "$OVERPASS_DB_DIR" "$OVERPASS_RULES_LOAD" &

      echo "Configuring and starting fcgiwrap..." >&2
      sed -i "s/FCGI_CHILDREN=.*/FCGI_CHILDREN=$OVERPASS_FASTCGI_PROCESSES/" /etc/init.d/fcgiwrap
      service fcgiwrap start

      echo "Configuring Overpass settings..." >&2
      echo "$OVERPASS_RATE_LIMIT" > "$OVERPASS_DB_DIR/rate_limit"
      echo "$OVERPASS_TIME" > "$OVERPASS_DB_DIR/max_allowed_time"
      echo "$OVERPASS_SPACE" > "$OVERPASS_DB_DIR/max_allowed_space"
      echo "$OVERPASS_MAX_TIMEOUT" > "$OVERPASS_DB_DIR/max_allowed_timeout"

      echo "Starting nginx..." >&2
      nginx -g 'daemon off;'
    }

    main() {
      start_api_and_updates
    }

    main

  health_check.sh: |
    #!/bin/bash

    # Credits to https://github.com/wiktorn/Overpass-API/blob/master/docker-healthcheck.sh

    set -e -o pipefail

    NODE_ID=1

    # if we allow duplicate queries, the healthcheck will fail because it always fetches node id 1
    # if that is the case (default), we query a random node
    if [[ ! -n ${OVERPASS_ALLOW_DUPLICATE_QUERIES} || ${OVERPASS_ALLOW_DUPLICATE_QUERIES} == "no" ]]; then
      NODE_ID=$(shuf -i 1-10000000 -n 1)
    fi

    OVERPASS_HEALTHCHECK='curl --noproxy "*" -qf "http://localhost/api/interpreter?data=\[out:json\];node(${NODE_ID});out;" | jq ".generator" |grep -q Overpass || exit 1'

    eval "${OVERPASS_HEALTHCHECK}"